package view;

import model.ModTarefas;
import dao.DAOTarefa;
import java.awt.Component;
import java.text.DateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DateFormatter;
import util.ConversorData;

/**
 *
 * @author Senac
 */
public class TelaPesquisar extends javax.swing.JFrame {

    TelaPrincipal telaPrincipal = new TelaPrincipal();
    ModTarefas mtf = new ModTarefas();
    DAOTarefa daoTF = new DAOTarefa();
    ArrayList<ModTarefas> lista = daoTF.listarDAOTarefa();
    String cadAlt = "Cad";
    TelaTarefas telaTarefas = new TelaTarefas();

    String dataPeriodo;
    //private Date dataSelecionada;

    /**
     * Creates new form TelaTarefas
     */
    public TelaPesquisar() {
        initComponents();
        setLocationRelativeTo(this);
        atualizarTabela();
        PreencherTarefasDatas();
        jRBPorData.setSelected(true);
        //setExtendedState(MAXIMIZED_BOTH);
        setIconImage(new ImageIcon(getClass().getResource("/imagem/logo.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btGPorPeríodo = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfTarefas = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        tfDescricao = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTf = new javax.swing.JTable();
        jBTAtualizar = new javax.swing.JButton();
        btnSair = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jBtEditar = new javax.swing.JButton();
        jBtexcluir = new javax.swing.JButton();
        tfID1 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jDCData = new com.toedter.calendar.JDateChooser();
        jTFHoraInicio = new javax.swing.JFormattedTextField();
        jTFHoraFim = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jRBPorData = new javax.swing.JRadioButton();
        jCBDatas = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jRBporPeriodo = new javax.swing.JRadioButton();
        jDCbtDataInicial = new com.toedter.calendar.JDateChooser();
        jDCbtDataFim = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jBPesquisarTarefa = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        jBtTarefasChamada = new javax.swing.JButton();
        jCBStatusP = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pesquisar Tarefas");

        jPanel1.setBackground(new java.awt.Color(0, 153, 102));

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PESQUISAR TAREFAS");

        jLabel2.setText("Tarefas");

        tfTarefas.setEnabled(false);

        jLabel3.setText("Descrição");

        tfDescricao.setEnabled(false);

        tblTf.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tarefas", "Descrição", "Data", "H.Inicio", "H.Fim", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblTf);
        if (tblTf.getColumnModel().getColumnCount() > 0) {
            tblTf.getColumnModel().getColumn(0).setMinWidth(50);
            tblTf.getColumnModel().getColumn(0).setPreferredWidth(50);
            tblTf.getColumnModel().getColumn(0).setMaxWidth(50);
            tblTf.getColumnModel().getColumn(1).setPreferredWidth(300);
            tblTf.getColumnModel().getColumn(2).setPreferredWidth(300);
        }

        jBTAtualizar.setText("Atualizar");
        jBTAtualizar.setEnabled(false);
        jBTAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTAtualizarActionPerformed(evt);
            }
        });

        btnSair.setText("Sair");
        btnSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSairActionPerformed(evt);
            }
        });

        jLabel4.setText("ID");

        jBtEditar.setText("Editar");
        jBtEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionEditar(evt);
            }
        });

        jBtexcluir.setText("Excluir");
        jBtexcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionExcluirTarefa(evt);
            }
        });

        tfID1.setEditable(false);
        tfID1.setEnabled(false);
        tfID1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfID1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Data:");

        jLabel6.setText("Hora Fim:");

        jLabel7.setText("Hora Inicio:");

        jDCData.setDateFormatString("dd '/' MM '/' y");
        jDCData.setEnabled(false);

        try {
            jTFHoraInicio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jTFHoraInicio.setEnabled(false);
        jTFHoraInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTFHoraInicioActionPerformed(evt);
            }
        });

        try {
            jTFHoraFim.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##:##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jTFHoraFim.setEnabled(false);

        jPanel2.setBackground(new java.awt.Color(0, 204, 51));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Pesquisar"));
        jPanel2.setToolTipText("");

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Por Data"));

        btGPorPeríodo.add(jRBPorData);
        jRBPorData.setText("Data");
        jRBPorData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBPorDataActionPerformed(evt);
            }
        });

        jCBDatas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "" }));
        jCBDatas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBDatasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jRBPorData)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jCBDatas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jRBPorData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCBDatas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Por Período"));

        btGPorPeríodo.add(jRBporPeriodo);
        jRBporPeriodo.setText("Data Inicial");
        jRBporPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRBporPeriodoActionPerformed(evt);
            }
        });

        jDCbtDataInicial.setDateFormatString("dd '/' MM '/' yyyy");

        jDCbtDataFim.setDateFormatString("dd '/' MM '/' yyyy");

        jLabel8.setText("Data Fim");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jRBporPeriodo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jDCbtDataInicial, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jDCbtDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jRBporPeriodo)
                    .addComponent(jLabel8))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jDCbtDataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDCbtDataFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Comandos"));

        jBPesquisarTarefa.setText("Pesquisar");
        jBPesquisarTarefa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ActionPesquisarTarefa(evt);
            }
        });

        btnLimpar.setText("Limpar");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBPesquisarTarefa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpar)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBPesquisarTarefa)
                    .addComponent(btnLimpar))
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        jBtTarefasChamada.setText("Tarefas");
        jBtTarefasChamada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actionChamarTarefas(evt);
            }
        });

        jCBStatusP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "", "PENDENTE", "EM ANDAMENTO", "CONCLUIDO" }));
        jCBStatusP.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfTarefas)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(tfDescricao, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addComponent(jBTAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBtEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBtexcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jBtTarefasChamada, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(373, 373, 373)
                        .addComponent(btnSair, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(89, 89, 89)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(tfID1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(87, 87, 87)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDCData, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(69, 69, 69)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTFHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addGap(66, 66, 66)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTFHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(57, 57, 57)
                                .addComponent(jCBStatusP, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel6))))
                .addGap(0, 22, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTFHoraFim, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCBStatusP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFHoraInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDCData, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfID1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(12, 12, 12)
                .addComponent(tfTarefas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBtEditar)
                        .addComponent(jBtexcluir)
                        .addComponent(jBtTarefasChamada)
                        .addComponent(jBTAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSair, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBTAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTAtualizarActionPerformed
        salvarTarefas();
    }//GEN-LAST:event_jBTAtualizarActionPerformed

    private void btnSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSairActionPerformed
        UIManager.put("OptionPane.yesButtonText", "Sim");
        UIManager.put("OptionPane.noButtonText", "Não");
        int op = JOptionPane.showConfirmDialog(null, "Você quer sair?", "Sair", JOptionPane.YES_NO_OPTION);
        if (op == 0) {
            this.dispose();
        }
    }//GEN-LAST:event_btnSairActionPerformed

    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparCampos();
    }//GEN-LAST:event_btnLimparActionPerformed

    private void actionEditar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionEditar
        editarTarefas();

    }//GEN-LAST:event_actionEditar

    private void actionExcluirTarefa(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionExcluirTarefa
        excluirTarefa();
    }//GEN-LAST:event_actionExcluirTarefa

    private void tfID1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfID1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfID1ActionPerformed

    private void jTFHoraInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTFHoraInicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTFHoraInicioActionPerformed

    private void jCBDatasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBDatasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBDatasActionPerformed

    private void jRBPorDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBPorDataActionPerformed
        jCBDatas.setEnabled(true);
        jDCbtDataInicial.setEnabled(false);
        jDCbtDataInicial.setDate(null);
        jDCbtDataFim.setEnabled(false);
        jDCbtDataFim.setDate(null);

    }//GEN-LAST:event_jRBPorDataActionPerformed

    private void jRBporPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRBporPeriodoActionPerformed
        jDCbtDataInicial.setEnabled(true);
        jDCbtDataFim.setEnabled(true);
        jCBDatas.setEnabled(false);
        jCBDatas.setSelectedIndex(0);
    }//GEN-LAST:event_jRBporPeriodoActionPerformed

    private void actionChamarTarefas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionChamarTarefas
        TelaPrincipal.chamarTarefas();
    }//GEN-LAST:event_actionChamarTarefas

    private void ActionPesquisarTarefa(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ActionPesquisarTarefa
        pesquisarTarefa();
    }//GEN-LAST:event_ActionPesquisarTarefa

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaTarefas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPesquisar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup btGPorPeríodo;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnSair;
    private javax.swing.JButton jBPesquisarTarefa;
    private javax.swing.JButton jBTAtualizar;
    private javax.swing.JButton jBtEditar;
    private javax.swing.JButton jBtTarefasChamada;
    private javax.swing.JButton jBtexcluir;
    private javax.swing.JComboBox<String> jCBDatas;
    private javax.swing.JComboBox<String> jCBStatusP;
    private com.toedter.calendar.JDateChooser jDCData;
    private com.toedter.calendar.JDateChooser jDCbtDataFim;
    private com.toedter.calendar.JDateChooser jDCbtDataInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRBPorData;
    private javax.swing.JRadioButton jRBporPeriodo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JFormattedTextField jTFHoraFim;
    private javax.swing.JFormattedTextField jTFHoraInicio;
    private javax.swing.JTable tblTf;
    private javax.swing.JTextField tfDescricao;
    private javax.swing.JTextField tfID1;
    private javax.swing.JTextField tfTarefas;
    // End of variables declaration//GEN-END:variables

    private void limparCampos() {
        tfID1.setText("");
        tfTarefas.setText("");
        tfDescricao.setText("");
        jDCData.setDate(null);
        jTFHoraInicio.setText("");
        jTFHoraFim.setText("");
        jDCbtDataInicial.setDate(null);
        jDCbtDataFim.setDate(null);
        jDCbtDataInicial.setEnabled(false);
        jDCbtDataFim.setEnabled(false);
        btGPorPeríodo.clearSelection();
        jCBDatas.setSelectedIndex(0);
        jCBDatas.setEnabled(false);
        jRBPorData.setSelected(true);
        jCBStatusP.setSelectedIndex(0);
        jCBStatusP.setEnabled(false);

    }

    private void atualizarTabela() {
        DAOTarefa dao = new DAOTarefa();
        lista = dao.listarDAOTarefa();
        DefaultTableModel model = (DefaultTableModel) tblTf.getModel();
        model.setRowCount(0);

        for (ModTarefas modTarefas : lista) {
            model.addRow(new Object[]{
                modTarefas.getId(),
                modTarefas.getTarefas(),
                modTarefas.getDescricao(),
                modTarefas.getDataTarefa(),
                modTarefas.getHoraInicio(),
                modTarefas.getHoraFim(),
                modTarefas.getStatus()
            });
            aplicarFormatoDataBr(tblTf, 3);
        }
    }

    private void salvarTarefas() {
        DateTimeFormatter formataHora = DateTimeFormatter.ofPattern("HH:mm");

        Date dataSelecionada = jDCData.getDate();
        String horaInicioTexto = jTFHoraInicio.getText();
        String horaFimTexto = jTFHoraFim.getText();

        LocalTime horaInicio;
        LocalTime horaFim;

        if (tfDescricao.getText().trim().equals("") || tfTarefas.getText().trim().equals("") || jCBStatusP.getSelectedItem() == null
                || jDCData.getDate() == null) {
            JOptionPane.showMessageDialog(null, "Campos não preenchidos deveram ser preenchidos", "Atenção", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            horaInicio = LocalTime.parse(horaInicioTexto, formataHora);
            horaFim = LocalTime.parse(horaFimTexto, formataHora);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Hora invalida! Use o formato HH:mm.", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        mtf.setTarefas(tfTarefas.getText());
        mtf.setDescricao(tfDescricao.getText());
        mtf.setDataTarefa(ConversorData.converterDateParaLocalDate(dataSelecionada));
        mtf.setHoraInicio(LocalTime.parse(jTFHoraInicio.getText()));
        mtf.setHoraFim(LocalTime.parse(jTFHoraFim.getText()));
        mtf.setStatus(String.valueOf(jCBStatusP.getSelectedIndex()));

        if (horaFim.isBefore(horaInicio) || horaFim.equals(horaInicio)) {
            JOptionPane.showMessageDialog(null, "Hora fim não pode ser menos ou igual a hora inicio", "Erro", JOptionPane.ERROR_MESSAGE);
            return;
        }

        mtf.setId(Integer.parseInt(tfID1.getText()));
        if (daoTF.editarTarefaDAO(mtf)) {
            JOptionPane.showMessageDialog(null, "Tarefa atualizada", "Cadastro", JOptionPane.INFORMATION_MESSAGE);
            limparCampos();
            atualizarTabela();
            desabilitarCampos();

        } else {
            JOptionPane.showMessageDialog(null, "Erro ao atualizar", "Cadastro", JOptionPane.ERROR_MESSAGE);
        }

        System.out.println(mtf.getDataTarefa());
    }

    private void editarTarefas() {

        cadAlt = "alt";
        int linha = tblTf.getSelectedRow();
        if (linha < 0) {
            JOptionPane.showMessageDialog(null, "Você deve selecionar um registro.", "Erro.", JOptionPane.ERROR_MESSAGE);
            desabilitarCampos();

        } else {
            int id = (int) tblTf.getValueAt(linha, 0);
            String tarefa = (String) tblTf.getValueAt(linha, 1);
            String descricao = (String) tblTf.getValueAt(linha, 2);
            LocalDate data = (LocalDate) tblTf.getValueAt(linha, 3);
            LocalTime horainicio = (LocalTime) tblTf.getValueAt(linha, 4);
            LocalTime horafim = (LocalTime) tblTf.getValueAt(linha, 5);
            String status = (String) tblTf.getValueAt(linha, 6);

            mtf = new ModTarefas();
            mtf.setId(id);
            mtf.setTarefas(tarefa);
            mtf.setDescricao(descricao);
            mtf.setDataTarefa(data);
            mtf.setHoraInicio(horainicio);
            mtf.setHoraFim(horafim);
            mtf.setStatus(status);

            tfID1.setText(String.valueOf(id));
            tfTarefas.setText(tarefa);
            tfDescricao.setText(descricao);
            jDCData.setDate(ConversorData.converterLocalDateParaDate(data));
            jTFHoraInicio.setText(String.valueOf(horainicio));
            jTFHoraFim.setText(String.valueOf(horafim));
            jCBStatusP.setSelectedIndex(0);

            habilitarCampos();

        }
    }

    private void excluirTarefa() {
        DAOTarefa dao = new DAOTarefa();
        int linha = tblTf.getSelectedRow();
        if (linha < 0) {
            JOptionPane.showConfirmDialog(null, "Um registro deve ser selecionado", "Erro", JOptionPane.ERROR_MESSAGE);
        } else {
            int id = (int) tblTf.getValueAt(linha, 0);
            if (id != 0) {

                UIManager.put("OptionPane.yesButtonText", "Sim");
                UIManager.put("OptionPane.noButtonText", "Não");

                int op = JOptionPane.showConfirmDialog(null, "deseja excluir tarefa?", "Atenção", JOptionPane.YES_NO_OPTION);
                if (op == 0) {

                    mtf.setId(id);
                    dao.excluirTarefaDAO(mtf.getId());
                    atualizarTabela();
                    JOptionPane.showMessageDialog(null, "Excluido com sucesso", "Observação", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Erro ao excluir tarefa", "Erro", JOptionPane.ERROR_MESSAGE);
            }

        }
    }

    private void aplicarFormatoDataBr(JTable tabela, int indiceColunaData) {
        tabela.getColumnModel().getColumn(indiceColunaData).setCellRenderer(new DefaultTableCellRenderer() {
            private final DateTimeFormatter formatoBr = DateTimeFormatter.ofPattern("dd/MM/yyyy");

            //@Override
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus,
                    int row, int column) {
                if (value instanceof LocalDate) {
                    value = ((LocalDate) value).format(formatoBr);
                }
                return super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            }
        });
    }

    private void PreencherTarefasDatas() {
        ArrayList<LocalDate> datas = new DAOTarefa().listarDatasTarefasDAO();
        DateTimeFormatter formatador = DateTimeFormatter.ofPattern("dd/MM/yyyy");

        for (LocalDate data : datas) {
            jCBDatas.addItem(data.format(formatador));
        }
    }

    private void pesquisarTarefa() {
        if (jRBPorData.isSelected()) {
            dataPeriodo = "data";
        } else if (jRBporPeriodo.isSelected()) {
            dataPeriodo = "periodo";
        }
        DateTimeFormatter formatador = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        DefaultTableModel model = (DefaultTableModel) tblTf.getModel();
        model.setRowCount(0);
        if (dataPeriodo.equals("data")) {
            //Pesquisar data única
            String dataSelecionada = (String) jCBDatas.getSelectedItem();
            if (dataSelecionada != null && !dataSelecionada.isEmpty()) {
                try {
                    LocalDate dataT = LocalDate.parse(dataSelecionada, formatador);
                    DAOTarefa dao = new DAOTarefa();
                    lista = dao.listarTarefasDataDAO(dataT);

                    for (ModTarefas modTarefas : lista) {
                        model.addRow(new Object[]{
                            modTarefas.getId(),
                            modTarefas.getTarefas(),
                            modTarefas.getDescricao(),
                            modTarefas.getDataTarefa(),
                            modTarefas.getHoraInicio(),
                            modTarefas.getHoraFim(),
                            modTarefas.getStatus()
                        });
                        aplicarFormatoDataBr(tblTf, 3);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, "Data Inválida", "Erro", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(null, "Não foi possivel achar!", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        } else if (dataPeriodo.equals("periodo")) {
            Date inicio = jDCbtDataInicial.getDate();
            Date fim = jDCbtDataFim.getDate();

            if (inicio != null && fim != null) {
                LocalDate dataInicio = inicio.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                LocalDate dataFim = fim.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();

                if (dataFim.isBefore(dataInicio)) {

                    JOptionPane.showMessageDialog(null, "A data fínal não pode ser menor que a data inicial.", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                DAOTarefa dao = new DAOTarefa();
                lista = dao.listarTarefasPorIntervalo(dataInicio, dataFim);

                for (ModTarefas modTarefas : lista) {
                    model.addRow(new Object[]{
                        modTarefas.getId(),
                        modTarefas.getTarefas(),
                        modTarefas.getDescricao(),
                        modTarefas.getDataTarefa(),
                        modTarefas.getHoraInicio(),
                        modTarefas.getHoraFim(),
                        modTarefas.getStatus()
                    });
                }

                aplicarFormatoDataBr(tblTf, 3);
            } else {
                JOptionPane.showMessageDialog(null, "Preencha as duas datas do periodo", "Aviso", JOptionPane.WARNING_MESSAGE);
            }
        }

    }

    private void habilitarCampos() {
        tfDescricao.setEnabled(true);
        jTFHoraInicio.setEnabled(true);
        jTFHoraFim.setEnabled(true);
        tfTarefas.setEnabled(true);
        jBTAtualizar.setEnabled(true);
        jBtTarefasChamada.setEnabled(true);
        jDCData.setEnabled(true);
        jCBStatusP.setEnabled(true);

    }

    /**
     * Desabilitar campos após edição e salvamento.
     */
    private void desabilitarCampos() {
        tfTarefas.setEnabled(false);
        tfDescricao.setEnabled(false);
        jDCData.setEnabled(false);
        jTFHoraInicio.setEnabled(false);
        jTFHoraFim.setEnabled(false);
        jDCbtDataInicial.setEnabled(false);
        jDCbtDataFim.setEnabled(false);
        jCBStatusP.setEnabled(false);
        jBTAtualizar.setEnabled(false);
    }

    private void telaInicial() {

        TelaPrincipal telaPrincipal = new TelaPrincipal();
        this.dispose();
          
          int op = 0;
          if(op == 0){
              telaPrincipal.setVisible(true);
              telaPrincipal.setLocationRelativeTo(this);
          }

    }

}
